#==================================================
# 
#  @<COPYRIGHT>@
#
#==================================================

# ============================================================================ #
# Set the Logging for the entire Web Application.                              #
# The Level can be DEBUG, INFO, WARN, ERROR, FATAL, or OFF                     #
# There are two predefined Appenders, TheConsole and AppLogFile                #
# ============================================================================ #
log4j.debug=true
log4j.rootLogger = INFO, TheConsole
#log4j.logger.org.apache.commons.httpclient = WARN, TheConsole
#log4j.logger.org.lyh.scheduler = INFO, TheConsole
#log4j.logger.org.lyh.scheduler.service = INFO, TheConsole

# ============================================================================ #
# The "TheConsole" Appender will write the log message to the console          #
# (System.out) with the pattern specified below                                #
# ============================================================================ #
log4j.appender.TheConsole        = org.apache.log4j.ConsoleAppender
log4j.appender.TheConsole.layout = org.apache.log4j.PatternLayout
log4j.appender.TheConsole.layout.ConversionPattern = %d{MM-dd HH:mm:ss} %x %-5p %c - %m%n


# ============================================================================ #
# The "AppLogFile" Appender will write the log message to a log file           #
# with the pattern and other attributes specified below.                       #
# ============================================================================ #
log4j.appender.AppLogFile        = org.apache.log4j.RollingFileAppender
log4j.appender.AppLogFile.layout = org.apache.log4j.PatternLayout
log4j.appender.AppLogFile.layout.ConversionPattern = %d{MM-dd HH:mm:ss} %x %-5p %c - %m%n
log4j.appender.AppLogFile.MaxBackupIndex= 1
log4j.appender.AppLogFile.MaxFileSize   = 1MB
log4j.appender.AppLogFile.Append        = true
log4j.appender.AppLogFile.Threshold 	= INFO
log4j.appender.AppLogFile.File          = c:/logs/JobScheduler_log.log

#日志信息格式中几个符号所代表的含义
# -X号: X信息输出时左对齐
# %p: 输出日志信息优先级，即DEBUG，INFO，WARN，ERROR，FATAL, 
# %d: 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921 
# %r: 输出自应用启动到输出该log信息耗费的毫秒数 
# %c: 输出日志信息所属的类目，通常就是所在类的全名 
# %t: 输出产生该日志事件的线程名 
# %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main (TestLog4.java:10) 
# %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中。 
# %%: 输出一个”%”字符 
# %F: 输出日志消息产生时所在的文件名称 
# %L: 输出代码中的行号 
# %m: 输出代码中指定的消息,产生的日志具体信息 
# %n: 输出一个回车换行符，Windows平台为”\r\n”，Unix平台为”\n”输出日志信息换行